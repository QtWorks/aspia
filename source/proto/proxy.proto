//
// Aspia Project
// Copyright (C) 2020 Dmitry Chapyshev <dmitry@aspia.ru>
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program. If not, see <https://www.gnu.org/licenses/>.
//

syntax = "proto3";

option optimize_for = LITE_RUNTIME;

package proto;

message ProxyKey
{
    enum Type
    {
        TYPE_UNKNOWN = 0;
        TYPE_X25519  = 1;
    }

    enum Encryption
    {
        ENCRYPTION_UNKNOWN           = 0;
        ENCRYPTION_CHACHA20_POLY1305 = 1;
    }

    // Unique key identifier in the proxy pool.
    uint32 key_id = 1;

    // Key type.
    Type type = 2;

    // Encryption algorithm.
    Encryption encryption = 3;

    // Public key of the proxy.
    bytes public_key = 4;

    // Initialization vector.
    bytes iv = 5;
}

message ProxyKeyPool
{
    // A pool of one time keys.
    repeated ProxyKey key = 1;
}

message ProxyKeyPoolRequest
{
    // The number of keys requested.
    uint32 pool_size = 1;
}

// Sent from proxy to router.
message ProxyToRouter
{
    ProxyKeyPool key_pool = 1;
}

// Sent from router to proxy.
message RouterToProxy
{
    ProxyKeyPoolRequest key_pool_request = 1;
}

// Sent from peer to proxy for authentication.
// If the authentication failed, then the connection should be dropped.
message PeerToProxy
{
    message IdPair
    {
        fixed64 first  = 1;
        fixed64 second = 2;
    }

    // Unique key identifier in the proxy pool.
    uint32 key_id = 1;

    // Public key of the peer.
    bytes public_key = 2;

    // Encrypted IdPair.
    bytes data = 3;
}
