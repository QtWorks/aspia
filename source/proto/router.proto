//
// Aspia Project
// Copyright (C) 2020 Dmitry Chapyshev <dmitry@aspia.ru>
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program. If not, see <https://www.gnu.org/licenses/>.
//

syntax = "proto3";

option optimize_for = LITE_RUNTIME;

package proto;

enum RouterSession
{
    ROUTER_SESSION_UNKNOWN = 0;
    ROUTER_SESSION_MANAGER = 1;
    ROUTER_SESSION_PEER    = 2;
}

enum ConnectionType
{
    CONNECTION_TYPE_UNKNOWN = 0;
    CONNECTION_TYPE_DIRECT  = 1;
    CONNECTION_TYPE_RELAY   = 2;
}

message EndPoint
{
    string host = 1;
    uint32 port = 2;
}

message PeerIdRequest
{
    bytes key = 1;
}

message PeerIdResponse
{
    fixed64 peer_id = 1;
}

message ConnectionRequest
{
    fixed64 peer_id = 1;
}

message ConnectionCandidate
{
    repeated EndPoint end_point = 1;
}

message ConnectionOffer
{
    ConnectionType type = 1;
    EndPoint address    = 2;
    bytes key           = 3;
}

message ConnectionResponse
{
    enum ErrorCode
    {
        UNKNOWN        = 0;
        SUCCESS        = 1;
        PEER_NOT_FOUND = 2;
        ACCESS_DENIED  = 3;
    }

    ErrorCode error_code  = 1;
    ConnectionOffer offer = 2;
}

message RouterToPeer
{
    PeerIdResponse peer_id_response        = 1;
    ConnectionRequest connection_request   = 2;
    ConnectionResponse connection_response = 3;
    ConnectionOffer connection_offer       = 4;
}

message PeerToRouter
{
    PeerIdRequest peer_id_request            = 1;
    ConnectionRequest connection_request     = 2;
    ConnectionCandidate connection_candidate = 3;
}

message User
{
    message Access
    {
        uint32 log   = 1;
        uint32 user  = 2;
        uint32 proxy = 3;
    }

    uint64 entry_id = 1;
    string name     = 2;
    string password = 3;
    uint32 sessions = 4;
    uint32 flags    = 5;
    Access access   = 6;
}

message Proxy
{
    uint64 entry_id    = 1;
    EndPoint end_point = 2;
    uint32 timeout     = 3;
    bytes private_key  = 4;
    uint32 flags       = 5;
}

message Log
{
    uint64 entry_id  = 1;
    uint64 timestamp = 2;
    string ip        = 3;
    fixed64 peer_id  = 4;
    string action    = 5;
}

message UserListRequest
{
    uint32 dummy = 1;
}

message UserListResponse
{
    enum ErrorCode
    {
        SUCCESS       = 0;
        ACCESS_DENIED = 1;
    }

    ErrorCode error_code = 1;
    repeated User user   = 2;
}

message UserModifyRequest
{
    enum Action
    {
        ACTION_ADD    = 0;
        ACTION_UPDATE = 1;
        ACTION_DELETE = 2;
    }

    Action action = 1;
    User user     = 2;
}

message UserModifyResponse
{
    enum ErrorCode
    {
        UNKNOWN          = 0;
        SUCCESS          = 1;
        ACCESS_DENIED    = 2;
        INVALID_ID       = 3;
        INVALID_NAME     = 4;
        INVALID_PASSWORD = 5;
        INVALID_SESSIONS = 6;
        INVALID_FLAGS    = 7;
    }

    ErrorCode error_code = 1;
}

message ProxyListRequest
{
    uint32 dummy = 1;
}

message ProxyListResponse
{
    enum ErrorCode
    {
        SUCCESS       = 0;
        ACCESS_DENIED = 1;
    }

    ErrorCode error_code = 1;
    repeated Proxy proxy = 2;
}

message ProxyModifyRequest
{
    enum Action
    {
        ACTION_ADD    = 0;
        ACTION_UPDATE = 1;
        ACTION_DELETE = 2;
    }

    Action action = 1;
    Proxy proxy   = 2;
}

message ProxyModifyResponse
{
    enum ErrorCode
    {
        UNKNOWN             = 0;
        SUCCESS             = 1;
        ACCESS_DENIED       = 2;
        INVALID_ID          = 3;
        INVALID_END_POINT   = 4;
        INVALID_TIMEOUT     = 5;
        INVALID_PRIVATE_KEY = 6;
        INVALID_FLAGS       = 7;
    }

    ErrorCode error_code = 1;
}

message LogListRequest
{
    uint32 dummy = 1;
}

message LogListResponse
{
    enum ErrorCode
    {
        SUCCESS       = 0;
        ACCESS_DENIED = 1;
    }

    ErrorCode error_code = 1;
    repeated Log log     = 2;
}

message RouterToManager
{
    UserListResponse user_list_response       = 1;
    UserModifyResponse user_modify_response   = 2;
    ProxyListResponse proxy_list_response     = 3;
    ProxyModifyResponse proxy_modify_response = 4;
    LogListResponse log_list_response         = 5;
}

message ManagerToRouter
{
    UserListRequest user_list_request       = 1;
    UserModifyRequest user_modify_request   = 2;
    ProxyListRequest proxy_list_request     = 3;
    ProxyModifyRequest proxy_modify_request = 4;
    LogListRequest log_list_request         = 5;
}
